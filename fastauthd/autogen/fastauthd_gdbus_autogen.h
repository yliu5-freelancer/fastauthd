/*
 * This file is generated by gdbus-codegen, do not modify it.
 *
 * The license of this code is the same as for the D-Bus interface description
 * it was derived from. Note that it links to GLib, so must comply with the
 * LGPL linking clauses.
 */

#ifndef __FASTAUTHD_AUTOGEN_FASTAUTHD_GDBUS_AUTOGEN_H__
#define __FASTAUTHD_AUTOGEN_FASTAUTHD_GDBUS_AUTOGEN_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for com.fastauthd.broker.deviceflow */

#define FASTAUTHD_TYPE_DEVICEFLOW (fastauthd_deviceflow_get_type ())
#define FASTAUTHD_DEVICEFLOW(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), FASTAUTHD_TYPE_DEVICEFLOW, fastauthdDeviceflow))
#define FASTAUTHD_IS_DEVICEFLOW(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), FASTAUTHD_TYPE_DEVICEFLOW))
#define FASTAUTHD_DEVICEFLOW_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), FASTAUTHD_TYPE_DEVICEFLOW, fastauthdDeviceflowIface))

struct _fastauthdDeviceflow;
typedef struct _fastauthdDeviceflow fastauthdDeviceflow;
typedef struct _fastauthdDeviceflowIface fastauthdDeviceflowIface;

struct _fastauthdDeviceflowIface
{
  GTypeInterface parent_iface;

  gboolean (*handle_query_fastauthd_nssdb) (
    fastauthdDeviceflow *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_username);

  gboolean (*handle_query_msa_auth_result) (
    fastauthdDeviceflow *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_devicecode);

  gboolean (*handle_refresh_device_code) (
    fastauthdDeviceflow *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_request_device_code) (
    fastauthdDeviceflow *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_username);

  gboolean (*handle_verify_user_and_group) (
    fastauthdDeviceflow *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_username,
    const gchar *arg_accesstoken,
    const gchar *arg_tokentype);

};

GType fastauthd_deviceflow_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *fastauthd_deviceflow_interface_info (void);
guint fastauthd_deviceflow_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void fastauthd_deviceflow_complete_request_device_code (
    fastauthdDeviceflow *object,
    GDBusMethodInvocation *invocation,
    gint returncode,
    const gchar *response);

void fastauthd_deviceflow_complete_refresh_device_code (
    fastauthdDeviceflow *object,
    GDBusMethodInvocation *invocation,
    gint returncode,
    const gchar *response);

void fastauthd_deviceflow_complete_query_fastauthd_nssdb (
    fastauthdDeviceflow *object,
    GDBusMethodInvocation *invocation,
    gint returncode,
    const gchar *usrpwdinfo);

void fastauthd_deviceflow_complete_query_msa_auth_result (
    fastauthdDeviceflow *object,
    GDBusMethodInvocation *invocation,
    gint returncode,
    const gchar *accesstoken);

void fastauthd_deviceflow_complete_verify_user_and_group (
    fastauthdDeviceflow *object,
    GDBusMethodInvocation *invocation,
    gint returncode,
    const gchar *response);



/* D-Bus method calls: */
void fastauthd_deviceflow_call_request_device_code (
    fastauthdDeviceflow *proxy,
    const gchar *arg_username,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean fastauthd_deviceflow_call_request_device_code_finish (
    fastauthdDeviceflow *proxy,
    gint *out_returncode,
    gchar **out_response,
    GAsyncResult *res,
    GError **error);

gboolean fastauthd_deviceflow_call_request_device_code_sync (
    fastauthdDeviceflow *proxy,
    const gchar *arg_username,
    gint *out_returncode,
    gchar **out_response,
    GCancellable *cancellable,
    GError **error);

void fastauthd_deviceflow_call_refresh_device_code (
    fastauthdDeviceflow *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean fastauthd_deviceflow_call_refresh_device_code_finish (
    fastauthdDeviceflow *proxy,
    gint *out_returncode,
    gchar **out_response,
    GAsyncResult *res,
    GError **error);

gboolean fastauthd_deviceflow_call_refresh_device_code_sync (
    fastauthdDeviceflow *proxy,
    gint *out_returncode,
    gchar **out_response,
    GCancellable *cancellable,
    GError **error);

void fastauthd_deviceflow_call_query_fastauthd_nssdb (
    fastauthdDeviceflow *proxy,
    const gchar *arg_username,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean fastauthd_deviceflow_call_query_fastauthd_nssdb_finish (
    fastauthdDeviceflow *proxy,
    gint *out_returncode,
    gchar **out_usrpwdinfo,
    GAsyncResult *res,
    GError **error);

gboolean fastauthd_deviceflow_call_query_fastauthd_nssdb_sync (
    fastauthdDeviceflow *proxy,
    const gchar *arg_username,
    gint *out_returncode,
    gchar **out_usrpwdinfo,
    GCancellable *cancellable,
    GError **error);

void fastauthd_deviceflow_call_query_msa_auth_result (
    fastauthdDeviceflow *proxy,
    const gchar *arg_devicecode,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean fastauthd_deviceflow_call_query_msa_auth_result_finish (
    fastauthdDeviceflow *proxy,
    gint *out_returncode,
    gchar **out_accesstoken,
    GAsyncResult *res,
    GError **error);

gboolean fastauthd_deviceflow_call_query_msa_auth_result_sync (
    fastauthdDeviceflow *proxy,
    const gchar *arg_devicecode,
    gint *out_returncode,
    gchar **out_accesstoken,
    GCancellable *cancellable,
    GError **error);

void fastauthd_deviceflow_call_verify_user_and_group (
    fastauthdDeviceflow *proxy,
    const gchar *arg_username,
    const gchar *arg_accesstoken,
    const gchar *arg_tokentype,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean fastauthd_deviceflow_call_verify_user_and_group_finish (
    fastauthdDeviceflow *proxy,
    gint *out_returncode,
    gchar **out_response,
    GAsyncResult *res,
    GError **error);

gboolean fastauthd_deviceflow_call_verify_user_and_group_sync (
    fastauthdDeviceflow *proxy,
    const gchar *arg_username,
    const gchar *arg_accesstoken,
    const gchar *arg_tokentype,
    gint *out_returncode,
    gchar **out_response,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define FASTAUTHD_TYPE_DEVICEFLOW_PROXY (fastauthd_deviceflow_proxy_get_type ())
#define FASTAUTHD_DEVICEFLOW_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), FASTAUTHD_TYPE_DEVICEFLOW_PROXY, fastauthdDeviceflowProxy))
#define FASTAUTHD_DEVICEFLOW_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), FASTAUTHD_TYPE_DEVICEFLOW_PROXY, fastauthdDeviceflowProxyClass))
#define FASTAUTHD_DEVICEFLOW_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), FASTAUTHD_TYPE_DEVICEFLOW_PROXY, fastauthdDeviceflowProxyClass))
#define FASTAUTHD_IS_DEVICEFLOW_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), FASTAUTHD_TYPE_DEVICEFLOW_PROXY))
#define FASTAUTHD_IS_DEVICEFLOW_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), FASTAUTHD_TYPE_DEVICEFLOW_PROXY))

typedef struct _fastauthdDeviceflowProxy fastauthdDeviceflowProxy;
typedef struct _fastauthdDeviceflowProxyClass fastauthdDeviceflowProxyClass;
typedef struct _fastauthdDeviceflowProxyPrivate fastauthdDeviceflowProxyPrivate;

struct _fastauthdDeviceflowProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  fastauthdDeviceflowProxyPrivate *priv;
};

struct _fastauthdDeviceflowProxyClass
{
  GDBusProxyClass parent_class;
};

GType fastauthd_deviceflow_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (fastauthdDeviceflowProxy, g_object_unref)
#endif

void fastauthd_deviceflow_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
fastauthdDeviceflow *fastauthd_deviceflow_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
fastauthdDeviceflow *fastauthd_deviceflow_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void fastauthd_deviceflow_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
fastauthdDeviceflow *fastauthd_deviceflow_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
fastauthdDeviceflow *fastauthd_deviceflow_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define FASTAUTHD_TYPE_DEVICEFLOW_SKELETON (fastauthd_deviceflow_skeleton_get_type ())
#define FASTAUTHD_DEVICEFLOW_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), FASTAUTHD_TYPE_DEVICEFLOW_SKELETON, fastauthdDeviceflowSkeleton))
#define FASTAUTHD_DEVICEFLOW_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), FASTAUTHD_TYPE_DEVICEFLOW_SKELETON, fastauthdDeviceflowSkeletonClass))
#define FASTAUTHD_DEVICEFLOW_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), FASTAUTHD_TYPE_DEVICEFLOW_SKELETON, fastauthdDeviceflowSkeletonClass))
#define FASTAUTHD_IS_DEVICEFLOW_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), FASTAUTHD_TYPE_DEVICEFLOW_SKELETON))
#define FASTAUTHD_IS_DEVICEFLOW_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), FASTAUTHD_TYPE_DEVICEFLOW_SKELETON))

typedef struct _fastauthdDeviceflowSkeleton fastauthdDeviceflowSkeleton;
typedef struct _fastauthdDeviceflowSkeletonClass fastauthdDeviceflowSkeletonClass;
typedef struct _fastauthdDeviceflowSkeletonPrivate fastauthdDeviceflowSkeletonPrivate;

struct _fastauthdDeviceflowSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  fastauthdDeviceflowSkeletonPrivate *priv;
};

struct _fastauthdDeviceflowSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType fastauthd_deviceflow_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (fastauthdDeviceflowSkeleton, g_object_unref)
#endif

fastauthdDeviceflow *fastauthd_deviceflow_skeleton_new (void);


/* ---- */

#define FASTAUTHD_TYPE_OBJECT (fastauthd_object_get_type ())
#define FASTAUTHD_OBJECT(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), FASTAUTHD_TYPE_OBJECT, fastauthdObject))
#define FASTAUTHD_IS_OBJECT(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), FASTAUTHD_TYPE_OBJECT))
#define FASTAUTHD_OBJECT_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), FASTAUTHD_TYPE_OBJECT, fastauthdObject))

struct _fastauthdObject;
typedef struct _fastauthdObject fastauthdObject;
typedef struct _fastauthdObjectIface fastauthdObjectIface;

struct _fastauthdObjectIface
{
  GTypeInterface parent_iface;
};

GType fastauthd_object_get_type (void) G_GNUC_CONST;

fastauthdDeviceflow *fastauthd_object_get_deviceflow (fastauthdObject *object);
fastauthdDeviceflow *fastauthd_object_peek_deviceflow (fastauthdObject *object);

#define FASTAUTHD_TYPE_OBJECT_PROXY (fastauthd_object_proxy_get_type ())
#define FASTAUTHD_OBJECT_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), FASTAUTHD_TYPE_OBJECT_PROXY, fastauthdObjectProxy))
#define FASTAUTHD_OBJECT_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), FASTAUTHD_TYPE_OBJECT_PROXY, fastauthdObjectProxyClass))
#define FASTAUTHD_OBJECT_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), FASTAUTHD_TYPE_OBJECT_PROXY, fastauthdObjectProxyClass))
#define FASTAUTHD_IS_OBJECT_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), FASTAUTHD_TYPE_OBJECT_PROXY))
#define FASTAUTHD_IS_OBJECT_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), FASTAUTHD_TYPE_OBJECT_PROXY))

typedef struct _fastauthdObjectProxy fastauthdObjectProxy;
typedef struct _fastauthdObjectProxyClass fastauthdObjectProxyClass;
typedef struct _fastauthdObjectProxyPrivate fastauthdObjectProxyPrivate;

struct _fastauthdObjectProxy
{
  /*< private >*/
  GDBusObjectProxy parent_instance;
  fastauthdObjectProxyPrivate *priv;
};

struct _fastauthdObjectProxyClass
{
  GDBusObjectProxyClass parent_class;
};

GType fastauthd_object_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (fastauthdObjectProxy, g_object_unref)
#endif

fastauthdObjectProxy *fastauthd_object_proxy_new (GDBusConnection *connection, const gchar *object_path);

#define FASTAUTHD_TYPE_OBJECT_SKELETON (fastauthd_object_skeleton_get_type ())
#define FASTAUTHD_OBJECT_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), FASTAUTHD_TYPE_OBJECT_SKELETON, fastauthdObjectSkeleton))
#define FASTAUTHD_OBJECT_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), FASTAUTHD_TYPE_OBJECT_SKELETON, fastauthdObjectSkeletonClass))
#define FASTAUTHD_OBJECT_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), FASTAUTHD_TYPE_OBJECT_SKELETON, fastauthdObjectSkeletonClass))
#define FASTAUTHD_IS_OBJECT_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), FASTAUTHD_TYPE_OBJECT_SKELETON))
#define FASTAUTHD_IS_OBJECT_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), FASTAUTHD_TYPE_OBJECT_SKELETON))

typedef struct _fastauthdObjectSkeleton fastauthdObjectSkeleton;
typedef struct _fastauthdObjectSkeletonClass fastauthdObjectSkeletonClass;
typedef struct _fastauthdObjectSkeletonPrivate fastauthdObjectSkeletonPrivate;

struct _fastauthdObjectSkeleton
{
  /*< private >*/
  GDBusObjectSkeleton parent_instance;
  fastauthdObjectSkeletonPrivate *priv;
};

struct _fastauthdObjectSkeletonClass
{
  GDBusObjectSkeletonClass parent_class;
};

GType fastauthd_object_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (fastauthdObjectSkeleton, g_object_unref)
#endif

fastauthdObjectSkeleton *fastauthd_object_skeleton_new (const gchar *object_path);
void fastauthd_object_skeleton_set_deviceflow (fastauthdObjectSkeleton *object, fastauthdDeviceflow *interface_);

/* ---- */

#define FASTAUTHD_TYPE_OBJECT_MANAGER_CLIENT (fastauthd_object_manager_client_get_type ())
#define FASTAUTHD_OBJECT_MANAGER_CLIENT(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), FASTAUTHD_TYPE_OBJECT_MANAGER_CLIENT, fastauthdObjectManagerClient))
#define FASTAUTHD_OBJECT_MANAGER_CLIENT_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), FASTAUTHD_TYPE_OBJECT_MANAGER_CLIENT, fastauthdObjectManagerClientClass))
#define FASTAUTHD_OBJECT_MANAGER_CLIENT_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), FASTAUTHD_TYPE_OBJECT_MANAGER_CLIENT, fastauthdObjectManagerClientClass))
#define FASTAUTHD_IS_OBJECT_MANAGER_CLIENT(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), FASTAUTHD_TYPE_OBJECT_MANAGER_CLIENT))
#define FASTAUTHD_IS_OBJECT_MANAGER_CLIENT_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), FASTAUTHD_TYPE_OBJECT_MANAGER_CLIENT))

typedef struct _fastauthdObjectManagerClient fastauthdObjectManagerClient;
typedef struct _fastauthdObjectManagerClientClass fastauthdObjectManagerClientClass;
typedef struct _fastauthdObjectManagerClientPrivate fastauthdObjectManagerClientPrivate;

struct _fastauthdObjectManagerClient
{
  /*< private >*/
  GDBusObjectManagerClient parent_instance;
  fastauthdObjectManagerClientPrivate *priv;
};

struct _fastauthdObjectManagerClientClass
{
  GDBusObjectManagerClientClass parent_class;
};

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (fastauthdObjectManagerClient, g_object_unref)
#endif

GType fastauthd_object_manager_client_get_type (void) G_GNUC_CONST;

GType fastauthd_object_manager_client_get_proxy_type (GDBusObjectManagerClient *manager, const gchar *object_path, const gchar *interface_name, gpointer user_data);

void fastauthd_object_manager_client_new (
    GDBusConnection        *connection,
    GDBusObjectManagerClientFlags  flags,
    const gchar            *name,
    const gchar            *object_path,
    GCancellable           *cancellable,
    GAsyncReadyCallback     callback,
    gpointer                user_data);
GDBusObjectManager *fastauthd_object_manager_client_new_finish (
    GAsyncResult        *res,
    GError             **error);
GDBusObjectManager *fastauthd_object_manager_client_new_sync (
    GDBusConnection        *connection,
    GDBusObjectManagerClientFlags  flags,
    const gchar            *name,
    const gchar            *object_path,
    GCancellable           *cancellable,
    GError                **error);

void fastauthd_object_manager_client_new_for_bus (
    GBusType                bus_type,
    GDBusObjectManagerClientFlags  flags,
    const gchar            *name,
    const gchar            *object_path,
    GCancellable           *cancellable,
    GAsyncReadyCallback     callback,
    gpointer                user_data);
GDBusObjectManager *fastauthd_object_manager_client_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
GDBusObjectManager *fastauthd_object_manager_client_new_for_bus_sync (
    GBusType                bus_type,
    GDBusObjectManagerClientFlags  flags,
    const gchar            *name,
    const gchar            *object_path,
    GCancellable           *cancellable,
    GError                **error);


G_END_DECLS

#endif /* __FASTAUTHD_AUTOGEN_FASTAUTHD_GDBUS_AUTOGEN_H__ */
