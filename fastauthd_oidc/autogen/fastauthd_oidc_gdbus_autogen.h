/*
 * This file is generated by gdbus-codegen, do not modify it.
 *
 * The license of this code is the same as for the D-Bus interface description
 * it was derived from. Note that it links to GLib, so must comply with the
 * LGPL linking clauses.
 */

#ifndef __FASTAUTHD_OIDC_AUTOGEN_FASTAUTHD_OIDC_GDBUS_AUTOGEN_H__
#define __FASTAUTHD_OIDC_AUTOGEN_FASTAUTHD_OIDC_GDBUS_AUTOGEN_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for com.fastauthd.oidc.deviceflow */

#define FASTAUTHD_OIDC_TYPE_DEVICEFLOW (fastauthd_oidc_deviceflow_get_type ())
#define FASTAUTHD_OIDC_DEVICEFLOW(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), FASTAUTHD_OIDC_TYPE_DEVICEFLOW, fastauthdoidcDeviceflow))
#define FASTAUTHD_OIDC_IS_DEVICEFLOW(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), FASTAUTHD_OIDC_TYPE_DEVICEFLOW))
#define FASTAUTHD_OIDC_DEVICEFLOW_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), FASTAUTHD_OIDC_TYPE_DEVICEFLOW, fastauthdoidcDeviceflowIface))

struct _fastauthdoidcDeviceflow;
typedef struct _fastauthdoidcDeviceflow fastauthdoidcDeviceflow;
typedef struct _fastauthdoidcDeviceflowIface fastauthdoidcDeviceflowIface;

struct _fastauthdoidcDeviceflowIface
{
  GTypeInterface parent_iface;

  gboolean (*handle_query_msa_auth_result) (
    fastauthdoidcDeviceflow *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_devicecode,
    const gchar *arg_clientid,
    const gchar *arg_tenantid);

  gboolean (*handle_refresh_device_code) (
    fastauthdoidcDeviceflow *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_username,
    const gchar *arg_clientid,
    const gchar *arg_tenantid);

  gboolean (*handle_request_device_code) (
    fastauthdoidcDeviceflow *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_username,
    const gchar *arg_clientid,
    const gchar *arg_tenantid);

  gboolean (*handle_verify_user_and_group) (
    fastauthdoidcDeviceflow *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_username,
    const gchar *arg_accesstoken,
    const gchar *arg_tokentype,
    const gchar *arg_groupid);

};

GType fastauthd_oidc_deviceflow_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *fastauthd_oidc_deviceflow_interface_info (void);
guint fastauthd_oidc_deviceflow_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void fastauthd_oidc_deviceflow_complete_request_device_code (
    fastauthdoidcDeviceflow *object,
    GDBusMethodInvocation *invocation,
    const gchar *response);

void fastauthd_oidc_deviceflow_complete_refresh_device_code (
    fastauthdoidcDeviceflow *object,
    GDBusMethodInvocation *invocation,
    const gchar *response);

void fastauthd_oidc_deviceflow_complete_query_msa_auth_result (
    fastauthdoidcDeviceflow *object,
    GDBusMethodInvocation *invocation,
    const gchar *response);

void fastauthd_oidc_deviceflow_complete_verify_user_and_group (
    fastauthdoidcDeviceflow *object,
    GDBusMethodInvocation *invocation,
    const gchar *response);



/* D-Bus method calls: */
void fastauthd_oidc_deviceflow_call_request_device_code (
    fastauthdoidcDeviceflow *proxy,
    const gchar *arg_username,
    const gchar *arg_clientid,
    const gchar *arg_tenantid,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean fastauthd_oidc_deviceflow_call_request_device_code_finish (
    fastauthdoidcDeviceflow *proxy,
    gchar **out_response,
    GAsyncResult *res,
    GError **error);

gboolean fastauthd_oidc_deviceflow_call_request_device_code_sync (
    fastauthdoidcDeviceflow *proxy,
    const gchar *arg_username,
    const gchar *arg_clientid,
    const gchar *arg_tenantid,
    gchar **out_response,
    GCancellable *cancellable,
    GError **error);

void fastauthd_oidc_deviceflow_call_refresh_device_code (
    fastauthdoidcDeviceflow *proxy,
    const gchar *arg_username,
    const gchar *arg_clientid,
    const gchar *arg_tenantid,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean fastauthd_oidc_deviceflow_call_refresh_device_code_finish (
    fastauthdoidcDeviceflow *proxy,
    gchar **out_response,
    GAsyncResult *res,
    GError **error);

gboolean fastauthd_oidc_deviceflow_call_refresh_device_code_sync (
    fastauthdoidcDeviceflow *proxy,
    const gchar *arg_username,
    const gchar *arg_clientid,
    const gchar *arg_tenantid,
    gchar **out_response,
    GCancellable *cancellable,
    GError **error);

void fastauthd_oidc_deviceflow_call_query_msa_auth_result (
    fastauthdoidcDeviceflow *proxy,
    const gchar *arg_devicecode,
    const gchar *arg_clientid,
    const gchar *arg_tenantid,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean fastauthd_oidc_deviceflow_call_query_msa_auth_result_finish (
    fastauthdoidcDeviceflow *proxy,
    gchar **out_response,
    GAsyncResult *res,
    GError **error);

gboolean fastauthd_oidc_deviceflow_call_query_msa_auth_result_sync (
    fastauthdoidcDeviceflow *proxy,
    const gchar *arg_devicecode,
    const gchar *arg_clientid,
    const gchar *arg_tenantid,
    gchar **out_response,
    GCancellable *cancellable,
    GError **error);

void fastauthd_oidc_deviceflow_call_verify_user_and_group (
    fastauthdoidcDeviceflow *proxy,
    const gchar *arg_username,
    const gchar *arg_accesstoken,
    const gchar *arg_tokentype,
    const gchar *arg_groupid,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean fastauthd_oidc_deviceflow_call_verify_user_and_group_finish (
    fastauthdoidcDeviceflow *proxy,
    gchar **out_response,
    GAsyncResult *res,
    GError **error);

gboolean fastauthd_oidc_deviceflow_call_verify_user_and_group_sync (
    fastauthdoidcDeviceflow *proxy,
    const gchar *arg_username,
    const gchar *arg_accesstoken,
    const gchar *arg_tokentype,
    const gchar *arg_groupid,
    gchar **out_response,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define FASTAUTHD_OIDC_TYPE_DEVICEFLOW_PROXY (fastauthd_oidc_deviceflow_proxy_get_type ())
#define FASTAUTHD_OIDC_DEVICEFLOW_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), FASTAUTHD_OIDC_TYPE_DEVICEFLOW_PROXY, fastauthdoidcDeviceflowProxy))
#define FASTAUTHD_OIDC_DEVICEFLOW_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), FASTAUTHD_OIDC_TYPE_DEVICEFLOW_PROXY, fastauthdoidcDeviceflowProxyClass))
#define FASTAUTHD_OIDC_DEVICEFLOW_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), FASTAUTHD_OIDC_TYPE_DEVICEFLOW_PROXY, fastauthdoidcDeviceflowProxyClass))
#define FASTAUTHD_OIDC_IS_DEVICEFLOW_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), FASTAUTHD_OIDC_TYPE_DEVICEFLOW_PROXY))
#define FASTAUTHD_OIDC_IS_DEVICEFLOW_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), FASTAUTHD_OIDC_TYPE_DEVICEFLOW_PROXY))

typedef struct _fastauthdoidcDeviceflowProxy fastauthdoidcDeviceflowProxy;
typedef struct _fastauthdoidcDeviceflowProxyClass fastauthdoidcDeviceflowProxyClass;
typedef struct _fastauthdoidcDeviceflowProxyPrivate fastauthdoidcDeviceflowProxyPrivate;

struct _fastauthdoidcDeviceflowProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  fastauthdoidcDeviceflowProxyPrivate *priv;
};

struct _fastauthdoidcDeviceflowProxyClass
{
  GDBusProxyClass parent_class;
};

GType fastauthd_oidc_deviceflow_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (fastauthdoidcDeviceflowProxy, g_object_unref)
#endif

void fastauthd_oidc_deviceflow_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
fastauthdoidcDeviceflow *fastauthd_oidc_deviceflow_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
fastauthdoidcDeviceflow *fastauthd_oidc_deviceflow_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void fastauthd_oidc_deviceflow_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
fastauthdoidcDeviceflow *fastauthd_oidc_deviceflow_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
fastauthdoidcDeviceflow *fastauthd_oidc_deviceflow_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define FASTAUTHD_OIDC_TYPE_DEVICEFLOW_SKELETON (fastauthd_oidc_deviceflow_skeleton_get_type ())
#define FASTAUTHD_OIDC_DEVICEFLOW_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), FASTAUTHD_OIDC_TYPE_DEVICEFLOW_SKELETON, fastauthdoidcDeviceflowSkeleton))
#define FASTAUTHD_OIDC_DEVICEFLOW_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), FASTAUTHD_OIDC_TYPE_DEVICEFLOW_SKELETON, fastauthdoidcDeviceflowSkeletonClass))
#define FASTAUTHD_OIDC_DEVICEFLOW_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), FASTAUTHD_OIDC_TYPE_DEVICEFLOW_SKELETON, fastauthdoidcDeviceflowSkeletonClass))
#define FASTAUTHD_OIDC_IS_DEVICEFLOW_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), FASTAUTHD_OIDC_TYPE_DEVICEFLOW_SKELETON))
#define FASTAUTHD_OIDC_IS_DEVICEFLOW_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), FASTAUTHD_OIDC_TYPE_DEVICEFLOW_SKELETON))

typedef struct _fastauthdoidcDeviceflowSkeleton fastauthdoidcDeviceflowSkeleton;
typedef struct _fastauthdoidcDeviceflowSkeletonClass fastauthdoidcDeviceflowSkeletonClass;
typedef struct _fastauthdoidcDeviceflowSkeletonPrivate fastauthdoidcDeviceflowSkeletonPrivate;

struct _fastauthdoidcDeviceflowSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  fastauthdoidcDeviceflowSkeletonPrivate *priv;
};

struct _fastauthdoidcDeviceflowSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType fastauthd_oidc_deviceflow_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (fastauthdoidcDeviceflowSkeleton, g_object_unref)
#endif

fastauthdoidcDeviceflow *fastauthd_oidc_deviceflow_skeleton_new (void);


/* ---- */

#define FASTAUTHD_OIDC_TYPE_OBJECT (fastauthd_oidc_object_get_type ())
#define FASTAUTHD_OIDC_OBJECT(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), FASTAUTHD_OIDC_TYPE_OBJECT, fastauthdoidcObject))
#define FASTAUTHD_OIDC_IS_OBJECT(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), FASTAUTHD_OIDC_TYPE_OBJECT))
#define FASTAUTHD_OIDC_OBJECT_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), FASTAUTHD_OIDC_TYPE_OBJECT, fastauthdoidcObject))

struct _fastauthdoidcObject;
typedef struct _fastauthdoidcObject fastauthdoidcObject;
typedef struct _fastauthdoidcObjectIface fastauthdoidcObjectIface;

struct _fastauthdoidcObjectIface
{
  GTypeInterface parent_iface;
};

GType fastauthd_oidc_object_get_type (void) G_GNUC_CONST;

fastauthdoidcDeviceflow *fastauthd_oidc_object_get_deviceflow (fastauthdoidcObject *object);
fastauthdoidcDeviceflow *fastauthd_oidc_object_peek_deviceflow (fastauthdoidcObject *object);

#define FASTAUTHD_OIDC_TYPE_OBJECT_PROXY (fastauthd_oidc_object_proxy_get_type ())
#define FASTAUTHD_OIDC_OBJECT_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), FASTAUTHD_OIDC_TYPE_OBJECT_PROXY, fastauthdoidcObjectProxy))
#define FASTAUTHD_OIDC_OBJECT_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), FASTAUTHD_OIDC_TYPE_OBJECT_PROXY, fastauthdoidcObjectProxyClass))
#define FASTAUTHD_OIDC_OBJECT_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), FASTAUTHD_OIDC_TYPE_OBJECT_PROXY, fastauthdoidcObjectProxyClass))
#define FASTAUTHD_OIDC_IS_OBJECT_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), FASTAUTHD_OIDC_TYPE_OBJECT_PROXY))
#define FASTAUTHD_OIDC_IS_OBJECT_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), FASTAUTHD_OIDC_TYPE_OBJECT_PROXY))

typedef struct _fastauthdoidcObjectProxy fastauthdoidcObjectProxy;
typedef struct _fastauthdoidcObjectProxyClass fastauthdoidcObjectProxyClass;
typedef struct _fastauthdoidcObjectProxyPrivate fastauthdoidcObjectProxyPrivate;

struct _fastauthdoidcObjectProxy
{
  /*< private >*/
  GDBusObjectProxy parent_instance;
  fastauthdoidcObjectProxyPrivate *priv;
};

struct _fastauthdoidcObjectProxyClass
{
  GDBusObjectProxyClass parent_class;
};

GType fastauthd_oidc_object_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (fastauthdoidcObjectProxy, g_object_unref)
#endif

fastauthdoidcObjectProxy *fastauthd_oidc_object_proxy_new (GDBusConnection *connection, const gchar *object_path);

#define FASTAUTHD_OIDC_TYPE_OBJECT_SKELETON (fastauthd_oidc_object_skeleton_get_type ())
#define FASTAUTHD_OIDC_OBJECT_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), FASTAUTHD_OIDC_TYPE_OBJECT_SKELETON, fastauthdoidcObjectSkeleton))
#define FASTAUTHD_OIDC_OBJECT_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), FASTAUTHD_OIDC_TYPE_OBJECT_SKELETON, fastauthdoidcObjectSkeletonClass))
#define FASTAUTHD_OIDC_OBJECT_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), FASTAUTHD_OIDC_TYPE_OBJECT_SKELETON, fastauthdoidcObjectSkeletonClass))
#define FASTAUTHD_OIDC_IS_OBJECT_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), FASTAUTHD_OIDC_TYPE_OBJECT_SKELETON))
#define FASTAUTHD_OIDC_IS_OBJECT_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), FASTAUTHD_OIDC_TYPE_OBJECT_SKELETON))

typedef struct _fastauthdoidcObjectSkeleton fastauthdoidcObjectSkeleton;
typedef struct _fastauthdoidcObjectSkeletonClass fastauthdoidcObjectSkeletonClass;
typedef struct _fastauthdoidcObjectSkeletonPrivate fastauthdoidcObjectSkeletonPrivate;

struct _fastauthdoidcObjectSkeleton
{
  /*< private >*/
  GDBusObjectSkeleton parent_instance;
  fastauthdoidcObjectSkeletonPrivate *priv;
};

struct _fastauthdoidcObjectSkeletonClass
{
  GDBusObjectSkeletonClass parent_class;
};

GType fastauthd_oidc_object_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (fastauthdoidcObjectSkeleton, g_object_unref)
#endif

fastauthdoidcObjectSkeleton *fastauthd_oidc_object_skeleton_new (const gchar *object_path);
void fastauthd_oidc_object_skeleton_set_deviceflow (fastauthdoidcObjectSkeleton *object, fastauthdoidcDeviceflow *interface_);

/* ---- */

#define FASTAUTHD_OIDC_TYPE_OBJECT_MANAGER_CLIENT (fastauthd_oidc_object_manager_client_get_type ())
#define FASTAUTHD_OIDC_OBJECT_MANAGER_CLIENT(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), FASTAUTHD_OIDC_TYPE_OBJECT_MANAGER_CLIENT, fastauthdoidcObjectManagerClient))
#define FASTAUTHD_OIDC_OBJECT_MANAGER_CLIENT_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), FASTAUTHD_OIDC_TYPE_OBJECT_MANAGER_CLIENT, fastauthdoidcObjectManagerClientClass))
#define FASTAUTHD_OIDC_OBJECT_MANAGER_CLIENT_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), FASTAUTHD_OIDC_TYPE_OBJECT_MANAGER_CLIENT, fastauthdoidcObjectManagerClientClass))
#define FASTAUTHD_OIDC_IS_OBJECT_MANAGER_CLIENT(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), FASTAUTHD_OIDC_TYPE_OBJECT_MANAGER_CLIENT))
#define FASTAUTHD_OIDC_IS_OBJECT_MANAGER_CLIENT_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), FASTAUTHD_OIDC_TYPE_OBJECT_MANAGER_CLIENT))

typedef struct _fastauthdoidcObjectManagerClient fastauthdoidcObjectManagerClient;
typedef struct _fastauthdoidcObjectManagerClientClass fastauthdoidcObjectManagerClientClass;
typedef struct _fastauthdoidcObjectManagerClientPrivate fastauthdoidcObjectManagerClientPrivate;

struct _fastauthdoidcObjectManagerClient
{
  /*< private >*/
  GDBusObjectManagerClient parent_instance;
  fastauthdoidcObjectManagerClientPrivate *priv;
};

struct _fastauthdoidcObjectManagerClientClass
{
  GDBusObjectManagerClientClass parent_class;
};

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (fastauthdoidcObjectManagerClient, g_object_unref)
#endif

GType fastauthd_oidc_object_manager_client_get_type (void) G_GNUC_CONST;

GType fastauthd_oidc_object_manager_client_get_proxy_type (GDBusObjectManagerClient *manager, const gchar *object_path, const gchar *interface_name, gpointer user_data);

void fastauthd_oidc_object_manager_client_new (
    GDBusConnection        *connection,
    GDBusObjectManagerClientFlags  flags,
    const gchar            *name,
    const gchar            *object_path,
    GCancellable           *cancellable,
    GAsyncReadyCallback     callback,
    gpointer                user_data);
GDBusObjectManager *fastauthd_oidc_object_manager_client_new_finish (
    GAsyncResult        *res,
    GError             **error);
GDBusObjectManager *fastauthd_oidc_object_manager_client_new_sync (
    GDBusConnection        *connection,
    GDBusObjectManagerClientFlags  flags,
    const gchar            *name,
    const gchar            *object_path,
    GCancellable           *cancellable,
    GError                **error);

void fastauthd_oidc_object_manager_client_new_for_bus (
    GBusType                bus_type,
    GDBusObjectManagerClientFlags  flags,
    const gchar            *name,
    const gchar            *object_path,
    GCancellable           *cancellable,
    GAsyncReadyCallback     callback,
    gpointer                user_data);
GDBusObjectManager *fastauthd_oidc_object_manager_client_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
GDBusObjectManager *fastauthd_oidc_object_manager_client_new_for_bus_sync (
    GBusType                bus_type,
    GDBusObjectManagerClientFlags  flags,
    const gchar            *name,
    const gchar            *object_path,
    GCancellable           *cancellable,
    GError                **error);


G_END_DECLS

#endif /* __FASTAUTHD_OIDC_AUTOGEN_FASTAUTHD_OIDC_GDBUS_AUTOGEN_H__ */
